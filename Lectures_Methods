Methods:

GET – это http-метод, с помощью которого клиент получает данные от сервера. Данные, которые нужно получить, GET-метод передает в URL в виде пар "ключ-значение". 
1. GET-запрос не имеет тело.
2. Успешный ответ на GET-запрос имеет тело.
3. Безопасный метод (с точки зрения сервера), т.к. не вносит изменения на сервер. С точки зрения пользователя может быть небезопасным, если в URL передаются логин и пароль.
4. Идемпотентный метод, т.е. повторные идентичные запросы имеют один и тот же эффект, не изменяющий состояние сервера.
5. Кэшируемый метод. Страница с установленными параметрами кэшируется (например, при установке фильтра на товары в интернет-магазине).
6. Может использоваться в Web-формах.
7. В URL можно передать до 2048 символов.

POST  – это http-метод, который используется для отправки полезной нагрузки (текст, картинки) на сервер. POST- запрос передает данные в теле запроса.
1. POST- запрос имеет тело.
2. Успешный ответ на POST-запрос имеет тело.
3. Небезопасный метод, т.к. вносит изменения на сервер. С точки зрения пользователя безопасен, т.к. данные передаются в теле запроса.
4. Неидемпотентный метод, т.е. повторные идентичные запросы имеют различные эффекты.
5. Некэшируемый метод. Страница с установленными параметрами не кэшируется (например, при установке фильтра на товары в интернет-магазине).
6. Может использоваться в Web-формах.
7. Длина запроса не ограничена.

PUT – это http-метод, который создает новый ресурс на сервере  или заменяет представление целевого ресурса, данными, находящимися в теле запроса.
1. PUT- запрос имеет тело.
2. Успешный ответ не имеет тело. 
3. Небезопасный метод, т.к. вносит изменения на сервер.
4. Идемпотентный метод.
5. Некэшируемый метод.
6. Не может использоваться в Web-формах.
7. Длина запроса не ограничена.

DELETE – это http-метод, который удаляет указанный ресурс с сервера. Небезопасный, идемпотентный, некэшируемый. При успешном выполнении возможны статус-коды ответа:
‒ 200 (OK). Удаление было выполнено, ответ содержит код и объект, описывающий состояние.
‒ 202 (Accepted). Удаление будет успешным, но ещё не выполнено.
‒ 204 (No Content) код ответа. Удаление было выполнено, но тело ответа отсутствует.

Update -  используются два метода PATCH и PUT, первый обновляет и модифицирует данные на сервере, второй обновляет и перезаписывает , PU/T идемпотентный PATCH нет
PATCH — это метод, который не объявляется ни безопасным, ни идемпотентным, и позволяет производить полное или частичное обновление, возможно с побочным эффектом на смежные ресурсы. На практике, как вы можете видеть, PATCH обычно в большей степени подходит для обновления ресурсов, чем PUT.

Метод HEAD- аналогичен GET,  но в ответ присылает только заголовки без тела HTTP cообщения. Часто используется для тестирования HTTP соединений и достижения узлов и ресурсов. Отсутствие тела сообщения позволяет увеличить скорость. Кэшируемый, идемпотентный, безопасный

Options- используется для описания параметров соединения с ресурсом. Возвращает методы, которые поддерживаются сервером. нет тела в запросе, но есть в ответе. Безопасный, идемпотентный, некэшируемый. Клиент может указать особый URL для обработки метода OPTIONS, или * (звёздочку) чтобы указать весь сервер целиком

Разницы между POST и PUT
Post в ответе сервера имеет тело, а Put нет
Put идемпотентный, Post нет 
PUT вносит изменения в существующий объект
POST создает новый объект.

Какая разница между GET и POST ?
1.Основное отличие в способе передачи данных. Запрос GET передаёт данные в URL в виде пар «имя-значение» (то есть через ссылку), а запрос POST передаёт данные в теле запроса.  
2 Используется GET для получения данных, а POST для отправки запроса.
3 Get идемпотентный и безопасный, Post нет
4. Get не имеет тело запроса, а Post имеет

Из каких фаз состоит HTTP сессия ?
HTTP- сессия состоит из трех фаз:
1. Клиент устанавливает соединение по транспортному протоколу TCP (или по другому протоколу, например UDP).
2. Клиент отправляет запрос на сервер и ждет ответ.
3. Сервер обрабатывает запрос и посылает ответ, в котором содержится статус-код и соответствующие данные.
Начиная с версии HTTP/1.1 2-я и 3-я фазы могут повторяться, т.е. клиенту позволено инициировать другой запрос.

HTTP Headers (заголовки HTTP) -это?
HTTP Headers - это строки в HTTP-сообщении, содержащие разделённую двоеточием пару параметр-значение. Заголовки должны отделяться от тела сообщения хотя бы одной пустой строкой. 
Заголовки разделяются на 4 основных группы:
1) General Headers - могут включать в себя любое сообщение клиента и сервера
2) Request Headers - используются только в запросах клиента
3) Response Headers - только для ответов от сервера
4) Entity Headers - сопровождают каждую сущность сообщения,
описывают содержимое тела сообщения.

headers header HTTP ответа?
1. Host (имя  хоста, куда передается запрос)
2. User-agent (ОС, браузер и его версия, язык, движок браузера и его версия, ОС).
3. Accept-encoding 
4. Accept-Language 
5. Content-Type
6. Content-Length
1. Date
2. Server
3. Last-modified
4. Content-Encoding
5. Content-Type
6. Content-Length
7. Cache-Control

Что такое URL-адрес?
Это механизм, используемый браузерами для получения любого опубликованного во Всемирной сети ресурса. URL обозначает Uniform Resource Locator. URL это лишь адрес, который выдан уникальному ресурсу в интернете. В теории, каждый корректный URL ведёт на уникальный ресурс.

URL-адрес состоит:
протокол, доменное имя, путь URL, якорь
Его составляющие: 
• способ обмена данными или тип сетевого протокола;
• логин
• пароль
• хост
• порт
• URL-путь
• строка запроса
• якорь
URL состоит из различных частей, некоторые из которых являются обязательными, а некоторые - факультативными. Например:
http://www.example.com:80/path/myfile.html?key1=value1&key2=value2#Paragraf1
1. Протокол - http:// 
2. Доменное имя - www.example.com
3. Порт - :80
4. Путь к файлу - /path/myfile.html 
5. Параметры (ключ-значение) - ?key1=value1&key2=value2
6. Якорь на другую часть того же ресурса - #Paragraf1
Максимальное количество символов 2048

В чем разница между URI, URL, URN ?
URL - определитель местонахождения ресурса (http://www.xxxx.com)
URN - имя ресурса (/yyyy/zzzz.html)
URI - идентификатор ресурса (http://www.xxxx.com/yyyy/zzzz.html)

Распиши из чего состоит этот запрос  https://am.iherb.com/c/whitaker-nutrition/bone-joint-cartilage?htids=105809&avids=45193%2C44560&pmin=100&pmax=50000
1. https:// - протокол
2. am.iherb.com – доменное имя
3. whitaker-nutrition/bone-joint-cartilage - путь к файлу
4. ? – начало запроса
5.avids=45193%2C44560&pmin=100&pmax=50000 параметры запроса (ключи-значения, разделенные знаком &)

Что такое endpoint API?
Endpoint (конечная точка) представляет собой шлюз для взаимодействия  серверных процессов приложения с внешним интерфейсом. Еndpoint – это кнопка на домофоне, где домофон – это API))

Как записать параметры в URL HTTP запроса?
нужно в конце URL-адреса поставить знак «?» и после него начинать задавать их по следующему правилу: имя_параметра1=значение_параметра1& имя_параметра2=значение_параметра2&… Разделителем между параметрами служит знак «&».

Что такой API ?
Интерфейс программирование приложений который предоставляет программа(ко мне можно обращаться так и так, я обязуюсь делать то и это - набор функций). Пользователи работают с GUI — graphical user interface. Программы работают с API — Application programming interface.

Какая разница между вэб сервис и вэб сервер ?
Веб-сервер - это сервер, который работает по протоколу HTTP. 
Веб-сервис - это метод с помощью которого взаимодействует клиент и сервер.